predicate Person(loc p, loc q, int m)
{
| (q == 0) => { m == 0 ; [p, 3] ** (p+1) :-> q ** (p+2) :-> m }
| not (q == 0) => { m == 1 && p != q ; [p, 3] ** (p+1) :-> q ** (p+2) :-> m }
}

predicate list(loc x, set s)
{
| x == 0 => { s =i {} ; emp }
| not (x == 0) => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x+1) :-> nxt ** list(nxt, s1) }
}

predicate list2(loc x, set s)
{
| x == 0 => { s =i {} ; emp }
| not (x == 0) => { s =i {v1} ++ s1 /\ v == 2*v1 ; [x, 2] ** x :-> v ** (x+1) :-> nxt ** list2(nxt, s1) }
}

predicate PairList(loc x, set fstVals, set sndVals)
{
| x == 0 => { fstVals =i {} /\ sndVals =i {} ; emp }
| not (x == 0) =>
   {
     fstVals =i {vFst} ++ fstVals1 /\ sndVals =i {vSnd} ++ sndVals1
       ;
     [x, 3] ** x :-> vFst ** (x+1) :-> vSnd ** (x+2) :-> nxt ** PairList(nxt, fstVals1, sndVals1)
   }
}

predicate Pair(loc x, int fst, int snd)
{
| true => { [x,2] ** x :-> fst ** (x+1) :-> snd }
}

predicate ListSum(loc x, int sum, set vals)
{
| x == 0 => { sum == 0 ; emp }
| not (x == 0) => { vals =i {v} + vals1 && sum == v+acc ; x :-> v ** (x+1) :-> nxt ** ListSum(nxt, acc, vals1) }
}

predicate PairListEq(loc x, set fstVals, set sndVals)
{
| x == 0 => { fstVals =i {} && sndVals =i {} ; emp }
| not (x == 0) => {
     fstVals =i {vFst} ++ fstVals1 && sndVals =i {vSnd} ++ sndVals1 && fstSum == sndSum
       ;
     [x, 3] ** x :-> vFst ** (x+1) :-> vSnd ** (x+2) :-> nxt ** PairListEq(nxt, fstVals1, sndVals1)
      ** ListSum(x, fstSum, fstVals) ** ListSum(x+1, sndSum, sndVals)
  }
}

predicate Budget(loc x, int cola, set dayVals, set weekVals)
{
| x == 0 => { dayVals =i {} /\ weekVals =i {} ; emp }
| not (x == 0) =>
    { dayVals =i {d1} ++ dayVals1 /\ weekVals =i {w1} ++ weekVals1
        /\ w1 == 7*d1 /\ d == cola*d1
        /\ w == 7*d
        ;
       [x, 2] **
       x :-> p ** (x+1) :-> nxt **
       [p, 2] **
       p :-> d ** (p+1) :-> w **
       Budget(nxt, cola, dayVals1, weekVals1)
    }
}

predicate BudgetWithMult(loc x, int mult, set dayVals, set weekVals)
{
| x == 0 => { dayVals =i {} /\ weekVals =i {} ; emp }

| not (x == 0) =>
    { dayVals =i {d1} ++ dayVals1 /\ weekVals =i {w} ++ weekVals1 /\ w == 7*d /\ d == mult*d1
        ;
       [x, 2] **
       x :-> p ** (x+1) :-> nxt **
       [p, 2] **
       p :-> d ** (p+1) :-> w **
       BudgetWithMult(nxt, mult, dayVals1, weekVals1)
    }
}


predicate M_budget2(loc x, int M_cola, set set_d, set set_w)
{
| x == null => { set_d =i {} && set_w =i {} ; emp }
| not (x == null) => { set_d =i {orig_d} ++ orig_set_d && set_w =i {orig_w} ++ orig_set_w && orig_w == (7 * orig_d) && M_w == (7 * M_d) && M_d == (M_cola * orig_d) ; [x, 3] ** x :-> M_w ** (x+1) :-> M_d ** (x+2) :-> M_nxt ** M_budget2(M_nxt, M_cola, orig_set_d, orig_set_w) }
}


predicate HanoiTower(loc x, int topSize, set disks)
{
| x == 0 => { disks =i {} ; emp }
| not (x == 0) =>
    {
      disks =i {d} ++ disks1 /\ d <= topSize
        ;
      [x, 2] **
      x :-> d **
      (x+1) :-> nxt **
      HanoiTower(nxt, topSize, disks1)
    }
}


predicate NatList(loc x, set s)
{
| x == 0 => { s =i {} ; emp }
| not (x == 0) => { s =i {v} ++ s1 /\ 0 <= v ; [x, 2] ** x :-> v ** (x+1) :-> nxt ** NatList(nxt, s1) }
}

predicate Sorted(loc x, int start, set items)
{
| x == 0 => { items =i {} ; emp }

| not (x == 0) => { items =i {v} ++ items1 /\ start <= v ; [x,2] ** x :-> v ** (x+1) :-> nxt ** Sorted(nxt, v, items1) }
}

